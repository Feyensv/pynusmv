diff -Naur glucose-syrup-4.1/simp/Glucose_C.C glucose/simp/Glucose_C.C
--- glucose-syrup-4.1/simp/Glucose_C.C	1970-01-01 01:00:00.000000000 +0100
+++ glucose/simp/Glucose_C.C	2018-02-10 13:52:35.885525000 +0100
@@ -0,0 +1,145 @@
+/*
+ *
+ * Wrapper for simp/Solver.cc
+ *
+ */
+
+#include "SimpSolver.h"
+extern "C" {
+    #include "Glucose_C.h"
+}
+
+extern "C" Glucose_ptr Glucose_Create()
+{
+    return (Glucose_ptr) new SimpSolver();
+}
+
+extern "C" void Glucose_Delete(Glucose_ptr ms){
+    delete (SimpSolver *) ms;
+}
+
+extern "C" int Glucose_Solve(Glucose_ptr ms)
+{
+    bool ret = ((SimpSolver *)ms)->solve(true);
+    if(ret){
+        return 1;
+    }
+    return 0;
+}
+
+extern "C" int Glucose_Nof_Variables(Glucose_ptr ms){
+    return ((SimpSolver *)ms)->nVars();
+}
+
+extern "C" int Glucose_Nof_Clauses(Glucose_ptr ms){
+    return ((SimpSolver *)ms)->nClauses();
+}
+
+extern "C" int Glucose_New_Variable(Glucose_ptr ms){
+    return ((SimpSolver *)ms)->newVar();//+1?
+}
+
+extern "C" int Glucose_addClause(Glucose_ptr ms, int *clause_lits, int nof_lits)
+{
+    int i;
+    vec<Lit> clauses;
+    for(i=0; i < nof_lits; i++){
+        const int lit = clause_lits[i];
+        //2 asserts ?
+        int var = abs(lit);
+        clauses.push((lit>0) ? Lit(var) : ~Lit(var));
+    }
+    ((SimpSolver *)ms) -> addClause(clauses);
+    if(((SimpSolver *)ms)->okay()){
+        //okay function? where is it defined?
+        return 1;
+    }
+    return 0;
+}
+
+extern "C" int Glucose_Solve_Assume(Glucose_ptr ms,
+                                      int nof_assumed_lits,
+                                      int *assumed_lits)
+{
+    //simplify the solver?
+    //limited solve -> use?
+    int i;
+    vec<Lit> clauses;
+    for(i=0; i < nof_assumed_lits; i++){
+        const int lit = assumed_lits[i];
+        //2 asserts ?
+        int var = abs(lit);
+        clauses.push((lit>0) ? Lit(var) : ~Lit(var));
+    }
+
+    if(((SimpSolver *)ms)->solve(clauses, true)){
+        //okay function? where is it defined?
+        return 1;
+    }
+    return 0;
+}
+
+extern "C" Glucose_simplifyDB(Glucose_ptr ms)
+{
+    ((SimpSolver *)ms->simplify();
+    if(((SimpSolver *)ms)->okay()
+        return 1;
+    return 0;
+}
+
+extern "C" int Glucose_Get_Value(Glucose_ptr ms, int var_num)
+{
+    assert(var_num > 0);
+    if(var_num > Glucose_Nof_Variables(ms))
+        return -1;
+    assert(((SimpSolver *)ms)->model[var_num-1] != l_Undef);
+
+    if(((SimpSolver *)ms)->model[var_num-1] == l_True)
+        return 1;
+    return 0;
+}
+
+extern "C" int Glucose_Get_Nof_Conflict_Lits(Glucose_ptr ms)
+{
+    assert(((SimpSolver*)0) != ((SimpSolver*)ms));
+    SimpSolver& solver = *((SimpSolver*)ms);
+
+    return solver.conflict.size();
+}
+
+extern "C" void Glucose_Get_Conflict_Lits(Glucose_ptr ms, int* conflict_lits)
+{
+    assert(((SimpSolver*)0) != ((SimpSolver*)ms));
+    SimpSolver& solver = *((SimpSolver*)ms);
+
+    vec<Lit>& cf = solver.conflict;
+
+    for (int i = 0; i < cf.size(); i++) {
+        int v = var(~cf[i]);
+        int s = sign(~cf[i]);
+        assert(v != var_Undef);
+        conflict_lits[i] = (s == 0) ? (v+1) : -(v+1);
+    }
+}
+
+/** mode can be  polarity_true, polarity_false, polarity_user, polarity_rnd */
+extern "C" void Glucose_Set_Polarity_Mode(Glucose_ptr ms, int mode)
+{
+    assert(((SimpSolver*)0) != ((SimpSolver*)ms));
+    SimpSolver& solver = *((SimpSolver*)ms);
+    solver.polarity_mode = mode;
+}
+
+extern "C" int Glucose_Get_Polarity_Mode(Glucose_ptr ms)
+{
+    assert(((SimpSolver*)0) != ((SimpSolver*)ms));
+    SimpSolver& solver = *((SimpSolver*)ms);
+    return solver.polarity_mode;
+}
+
+extern "C" void Glucose_Set_Random_Seed(Glucose_ptr ms, double seed)
+{
+    SimpSolver& solver = *((SimpSolver*)ms);
+    solver.setRandomSeed(seed);
+}
+
diff -Naur glucose-syrup-4.1/core/Glucose_C.C glucose/core/Glucose_C.C
--- glucose-syrup-4.1/core/Glucose_C.C	1970-01-01 01:00:00.000000000 +0100
+++ glucose/core/Glucose_C.C	2018-02-10 13:57:19.175100000 +0100
@@ -0,0 +1,145 @@
+/*
+ *
+ * Wrapper for core/Solver.cc
+ *
+ */
+
+#include "Solver.h"
+extern "C" {
+    #include "../core/Glucose_C.h"
+}
+
+extern "C" Glucose_ptr Glucose_Create()
+{
+    return (Glucose_ptr) new Solver();
+}
+
+extern "C" void Glucose_Delete(Glucose_ptr ms){
+    delete (Solver *) ms;
+}
+
+extern "C" int Glucose_Solve(Glucose_ptr ms)
+{
+    bool ret = ((Solver *)ms)->solve(true);
+    if(ret){
+        return 1;
+    }
+    return 0;
+}
+
+extern "C" int Glucose_Nof_Variables(Glucose_ptr ms){
+    return ((Solver *)ms)->nVars();
+}
+
+extern "C" int Glucose_Nof_Clauses(Glucose_ptr ms){
+    return ((Solver *)ms)->nClauses();
+}
+
+extern "C" int Glucose_New_Variable(Glucose_ptr ms){
+    return ((Solver *)ms)->newVar();//+1?
+}
+
+extern "C" int Glucose_addClause(Glucose_ptr ms, int *clause_lits, int nof_lits)
+{
+    int i;
+    vec<Lit> clauses;
+    for(i=0; i < nof_lits; i++){
+        const int lit = clause_lits[i];
+        //2 asserts ?
+        int var = abs(lit);
+        clauses.push((lit>0) ? Lit(var) : ~Lit(var));
+    }
+    ((Solver *)ms) -> addClause(clauses);
+    if(((Solver *)ms)->okay()){
+        //okay function? where is it defined?
+        return 1;
+    }
+    return 0;
+}
+
+extern "C" int Glucose_Solve_Assume(Glucose_ptr ms,
+                                      int nof_assumed_lits,
+                                      int *assumed_lits)
+{
+    //simplify the solver?
+    //limited solve -> use?
+    int i;
+    vec<Lit> clauses;
+    for(i=0; i < nof_assumed_lits; i++){
+        const int lit = assumed_lits[i];
+        //2 asserts ?
+        int var = abs(lit);
+        clauses.push((lit>0) ? Lit(var) : ~Lit(var));
+    }
+
+    if(((Solver *)ms)->solve(clauses, true)){
+        //okay function? where is it defined?
+        return 1;
+    }
+    return 0;
+}
+
+extern "C" Glucose_simplifyDB(Glucose_ptr ms)
+{
+    ((Solver *)ms->simplify();
+    if(((Solver *)ms)->okay()
+        return 1;
+    return 0;
+}
+
+extern "C" int Glucose_Get_Value(Glucose_ptr ms, int var_num)
+{
+    assert(var_num > 0);
+    if(var_num > Glucose_Nof_Variables(ms))
+        return -1;
+    assert(((Solver *)ms)->model[var_num-1] != l_Undef);
+
+    if(((Solver *)ms)->model[var_num-1] == l_True)
+        return 1;
+    return 0;
+}
+
+extern "C" int Glucose_Get_Nof_Conflict_Lits(Glucose_ptr ms)
+{
+    assert(((Solver*)0) != ((Solver*)ms));
+    Solver& solver = *((Solver*)ms);
+
+    return solver.conflict.size();
+}
+
+extern "C" void Glucose_Get_Conflict_Lits(Glucose_ptr ms, int* conflict_lits)
+{
+    assert(((Solver*)0) != ((Solver*)ms));
+    Solver& solver = *((Solver*)ms);
+
+    vec<Lit>& cf = solver.conflict;
+
+    for (int i = 0; i < cf.size(); i++) {
+        int v = var(~cf[i]);
+        int s = sign(~cf[i]);
+        assert(v != var_Undef);
+        conflict_lits[i] = (s == 0) ? (v+1) : -(v+1);
+    }
+}
+
+/** mode can be  polarity_true, polarity_false, polarity_user, polarity_rnd */
+extern "C" void Glucose_Set_Polarity_Mode(Glucose_ptr ms, int mode)
+{
+    assert(((Solver*)0) != ((Solver*)ms));
+    Solver& solver = *((Solver*)ms);
+    solver.polarity_mode = mode;
+}
+
+extern "C" int Glucose_Get_Polarity_Mode(Glucose_ptr ms)
+{
+    assert(((Solver*)0) != ((Solver*)ms));
+    Solver& solver = *((Solver*)ms);
+    return solver.polarity_mode;
+}
+
+extern "C" void Glucose_Set_Random_Seed(Glucose_ptr ms, double seed)
+{
+    Solver& solver = *((Solver*)ms);
+    solver.setRandomSeed(seed);
+}
+
diff -Naur glucose-syrup-4.1/simp/Glucose_C.h glucose/simp/Glucose_C.h
--- glucose-syrup-4.1/simp/Glucose_C.h	1970-01-01 01:00:00.000000000 +0100
+++ glucose/simp/Glucose_C.h	2018-02-10 13:15:35.595935000 +0100
@@ -0,0 +1,27 @@
+/*
+ * Wrapper for Solver.h
+ */
+#ifndef PYNUSMV_GLUCOSE_C_H
+#define PYNUSMV_GLUCOSE_C_H
+
+#define Glucose_ptr void *
+
+Glucose_ptr Glucose_Create();
+void Glucose_Delete(Glucose_ptr);
+int Glucose_Nof_Variables(Glucose_ptr);
+int Glucose_Nof_Clauses(Glucose_ptr);
+int Glucose_New_Variable(Glucose_ptr);
+int Glucose_Add_Clause(Glucose_ptr, int *clause_lits, int nof_lits);
+int Glucose_Solve(Glucose_ptr);
+int Glucose_Solve_Assume(Glucose_ptr, int nof_assumed_lits, int *assumed_lits);
+int Glucose_simplifyDB(Glucose_ptr);
+int Glucose_Get_Value(Glucose_ptr, int var_num);
+int Glucose_Get_Nof_Conflict_Lits(Glucose_ptr ms);
+void MiniSat_Get_Conflict_Lits(Glucose_ptr ms, int* conflict_lits);
+
+void Glucose_Set_Polarity_Mode(Glucose_ptr ms, int mode);
+int Glucose_Get_Polarity_Mode(Glucose_ptr ms);
+void Glucose_Set_Random_Seed(Glucose_ptr ms, double seed);
+
+//PREFERRED VARIABLES UNUSED BY PYNUSMV
+#endif //PYNUSMV_GLUCOSE_C_H
diff -Naur glucose-syrup-4.1/core/Glucose_C.h glucose/core/Glucose_C.h
--- glucose-syrup-4.1/core/Glucose_C.h	1970-01-01 01:00:00.000000000 +0100
+++ glucose/core/Glucose_C.h	2018-02-10 13:15:35.595935000 +0100
@@ -0,0 +1,27 @@
+/*
+ * Wrapper for Solver.h
+ */
+#ifndef PYNUSMV_GLUCOSE_C_H
+#define PYNUSMV_GLUCOSE_C_H
+
+#define Glucose_ptr void *
+
+Glucose_ptr Glucose_Create();
+void Glucose_Delete(Glucose_ptr);
+int Glucose_Nof_Variables(Glucose_ptr);
+int Glucose_Nof_Clauses(Glucose_ptr);
+int Glucose_New_Variable(Glucose_ptr);
+int Glucose_Add_Clause(Glucose_ptr, int *clause_lits, int nof_lits);
+int Glucose_Solve(Glucose_ptr);
+int Glucose_Solve_Assume(Glucose_ptr, int nof_assumed_lits, int *assumed_lits);
+int Glucose_simplifyDB(Glucose_ptr);
+int Glucose_Get_Value(Glucose_ptr, int var_num);
+int Glucose_Get_Nof_Conflict_Lits(Glucose_ptr ms);
+void MiniSat_Get_Conflict_Lits(Glucose_ptr ms, int* conflict_lits);
+
+void Glucose_Set_Polarity_Mode(Glucose_ptr ms, int mode);
+int Glucose_Get_Polarity_Mode(Glucose_ptr ms);
+void Glucose_Set_Random_Seed(Glucose_ptr ms, double seed);
+
+//PREFERRED VARIABLES UNUSED BY PYNUSMV
+#endif //PYNUSMV_GLUCOSE_C_H
diff -Naur glucose-syrup-4.1/Makefile glucose/Makefile
--- glucose-syrup-4.1/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ glucose/core/Makefile	2018-01-02 11:13:23.960000000 +0100
@@ -0,0 +1,29 @@
+LIBNAME = lib.a
+EXT_LIBNAME = libGlucose.a
+EXT_LIBIFC = Glucose_C.h
+COREDIR = simp
+
+LN ?= ln -s
+RANLIB ?= ranlib
+RM ?= rm -f
+MAKE ?= make
+
+# ----------------------------------------------------------------------
+# this target is invoked by the builder
+lib: $(EXT_LIBNAME) $(EXT_LIBIFC)
+	#@echo Done
+
+clean:
+	cd $(COREDIR) && $(MAKE) clean
+	$(RM) $(EXT_LIBNAME) $(EXT_LIBIFC)
+	$(RM) $(COREDIR)/depend.mk
+# ----------------------------------------------------------------------
+
+$(COREDIR)/$(LIBNAME):
+	cd $(COREDIR) && $(MAKE) libr && $(RANLIB) $(LIBNAME) #libs libp libr libd TODO
+
+$(EXT_LIBNAME): $(COREDIR)/$(LIBNAME)
+	$(LN) $(COREDIR)/$(LIBNAME) $(EXT_LIBNAME)
+
+$(EXT_LIBIFC):
+	$(LN) $(COREDIR)/$(EXT_LIBIFC) $(EXT_LIBIFC)
