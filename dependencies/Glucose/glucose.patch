diff -Naur Glucose.ORIG/core/Solver.h Glucose/core/Solver.h
--- Glucose.ORIG/core/Solver.h	2006-11-10 22:54:29.000000000 +0100
+++ Glucose/core/Solver.h	2010-01-27 12:44:25.000000000 +0100
@@ -154,6 +154,22 @@
     void    setPolarity    (Var v, bool b); // Declare which polarity the decision heuristic should use for a variable. Requires mode 'polarity_user'.
     void    setDecisionVar (Var v, bool b); // Declare if a variable should be eligible for selection in the decision heuristic.

+    // NuSMV: SEED
+    void    setRandomSeed(double seed); // sets random seed (cannot be 0)
+    // NuSMV: SEED END
+    // NuSMV: PREF MOD
+    /*
+     * Add a variable at the end of the list of preferred variables
+     * Does not remove the variable from the standard ordering.
+     */
+    void addPreferred(Var v);
+
+    /*
+     * Clear vector of preferred variables.
+     */
+    void clearPreferred();
+    // NuSMV: PREF MOD END
+
     // Read state:
     //
     lbool   value      (Var x) const;       // The current value of a variable.
@@ -351,7 +351,11 @@
     double              progress_estimate;// Set by 'search()'.
     bool                remove_satisfied; // Indicates whether possibly inefficient linear scan for satisfied clauses should be performed in 'simplify'.
     vec<unsigned int>   permDiff;           // permDiff[var] contains the current conflict number... Used to count the number of  LBD

+    // NuSMV: PREF MOD
+    vec<Var>            preferred;
+    // NuSMV: PREF MOD END
+
     // Temporaries (to reduce allocation overhead). Each variable is prefixed by the method in which it is
     // used, exept 'seen' wich is used in several places.
     //
@@ -533,11 +533,12 @@
inline void     Solver::setPolarity   (Var v, bool b) { polarity[v] = b; }
inline void     Solver::setDecisionVar(Var v, bool b)
{
    if      ( b && !decision[v]) stats[dec_vars]++;
    else if (!b &&  decision[v]) stats[dec_vars]--;

    decision[v] = b;
    insertVarOrder(v);
}
+inline void     Solver::setRandomSeed (double seed) { assert(seed != 0); random_seed = seed; }
inline void     Solver::setConfBudget(int64_t x){ conflict_budget    = conflicts    + x; }
inline void     Solver::setPropBudget(int64_t x){ propagation_budget = propagations + x; }
diff -Naur Glucose.ORIG/simp/SimpSolver.cc Glucose/simp/SimpSolver.cc
--- Glucose.ORIG/simp/SimpSolver.cc	2007-07-21 00:07:17.000000000 +0200
+++ Glucose/simp/SimpSolver.cc	2010-01-27 12:44:25.000000000 +0100
@@ -183,9 +183,28 @@
                 extra_frozen.push(v);
             } }

+	// NuSMV: PREF MOD
+        // Preferred variables must be temporarily frozen to run variable
+	// elimination:
+        for (int i = 0; i < preferred.size(); i++){
+            Var v = preferred[i];
+
+            // If a preferred variable has been eliminated, remember it.
+            if (isEliminated(v))
+                remember(v);
+
+            if (!frozen[v]){
+                // Freeze and store.
+                setFrozen(v, true);
+                extra_frozen.push(v);
+            } }
+	// NuSMV: PREF MOD END
+
         result = lbool(eliminate(turn_off_simp));
     }

+    if (result == l_False) ok = false;
+
     if (result == l_True)
         result = Solver::solve_();

@@ -204,9 +204,10 @@
 }


-
 bool SimpSolver::addClause_(vec<Lit>& ps)
 {
+    if (!ok) return false;
+
 #ifndef NDEBUG
     for (int i = 0; i < ps.size(); i++)
         assert(!isEliminated(var(ps[i])));
 #endif